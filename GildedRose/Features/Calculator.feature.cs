// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GildedRose.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Gilded Rose", Description=@"	- All items have a SellIn value which denotes the number of days we have to sell the item
	- All items have a Quality value which denotes how valuable the item is
	- At the end of each day our system lowers both values for every item

Pretty simple, right? Well this is where it gets interesting:

	- Once the sell by date has passed, Quality degrades twice as fast
	- The Quality of an item is never negative
	- ""Aged Brie"" actually increases in Quality the older it gets
	- The Quality of an item is never more than 50
	- ""Sulfuras"", being a legendary item, never has to be sold or decreases in Quality
	- ""Backstage passes"", like aged brie, increases in Quality as its SellIn value approaches;
	Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but
	Quality drops to 0 after the concert
Just for clarification, an item can never have its Quality increase above 50, however ""Sulfuras"" is a
legendary item and as such its Quality is 80 and it never alters.

We have recently signed a supplier of conjured items. This requires an update to our system:

	- ""Conjured"" items degrade in Quality twice as fast as normal items", SourceFile="Features\\Calculator.feature", SourceLine=0)]
    public partial class GildedRoseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Calculator.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Gilded Rose", @"	- All items have a SellIn value which denotes the number of days we have to sell the item
	- All items have a Quality value which denotes how valuable the item is
	- At the end of each day our system lowers both values for every item

Pretty simple, right? Well this is where it gets interesting:

	- Once the sell by date has passed, Quality degrades twice as fast
	- The Quality of an item is never negative
	- ""Aged Brie"" actually increases in Quality the older it gets
	- The Quality of an item is never more than 50
	- ""Sulfuras"", being a legendary item, never has to be sold or decreases in Quality
	- ""Backstage passes"", like aged brie, increases in Quality as its SellIn value approaches;
	Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but
	Quality drops to 0 after the concert
Just for clarification, an item can never have its Quality increase above 50, however ""Sulfuras"" is a
legendary item and as such its Quality is 80 and it never alters.

We have recently signed a supplier of conjured items. This requires an update to our system:

	- ""Conjured"" items degrade in Quality twice as fast as normal items", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void QualityChangesEachDay(string name, string cq, string cs, string rq, string rs, string notes, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("cq", cq);
            argumentsOfScenario.Add("cs", cs);
            argumentsOfScenario.Add("rq", rq);
            argumentsOfScenario.Add("rs", rs);
            argumentsOfScenario.Add("notes", notes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quality changes each day", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
testRunner.Given(string.Format("item \"{0}\" with current Quality {1} and current SellIn {2}", name, cq, cs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
testRunner.When("a day passes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
testRunner.Then(string.Format("item has revised Quality {0} and revised Sellin {1}", rq, rs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 0", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant0()
        {
#line 23
this.QualityChangesEachDay("Non-specific-item", "1", "1", "0", "0", "quality decrease", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 1", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant1()
        {
#line 23
this.QualityChangesEachDay("Non-specific-item", "0", "1", "0", "0", "never below 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 2", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant2()
        {
#line 23
this.QualityChangesEachDay("Non-specific-item", "4", "0", "2", "-1", "twice as fast", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 3", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant3()
        {
#line 23
this.QualityChangesEachDay("Aged Brie", "4", "1", "5", "0", "increases", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 4", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant4()
        {
#line 23
this.QualityChangesEachDay("Aged Brie", "4", "0", "6", "-1", "increases twice", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 5", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant5()
        {
#line 23
this.QualityChangesEachDay("Aged Brie", "4", "-1", "6", "-2", "increases twice", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 6", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant6()
        {
#line 23
this.QualityChangesEachDay("Aged Brie", "49", "-1", "50", "-2", "50 limit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 7", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant7()
        {
#line 23
this.QualityChangesEachDay("Aged Brie", "50", "-1", "50", "-2", "50 limit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 8", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant8()
        {
#line 23
this.QualityChangesEachDay("Sulfuras, Hand of Ragnaros", "80", "1", "80", "1", "never changes", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 9", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant9()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "1", "11", "2", "10", "increase by 1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 10", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant10()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "1", "10", "3", "9", "increase by 2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 11", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant11()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "1", "6", "3", "5", "increase by 2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 12", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant12()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "1", "5", "4", "4", "increase by 3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 13", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant13()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "1", "0", "0", "-1", "after concert", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 14", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant14()
        {
#line 23
this.QualityChangesEachDay("Backstage passes to a TAFKAL80ETC concert", "50", "11", "50", "10", "50 limit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 15", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant15()
        {
#line 23
this.QualityChangesEachDay("Conjured", "2", "1", "0", "0", "quality decrease", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 16", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant16()
        {
#line 23
this.QualityChangesEachDay("Conjured", "0", "1", "0", "0", "never below 0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Quality changes each day, Variant 17", SourceLine=28)]
        public virtual void QualityChangesEachDay_Variant17()
        {
#line 23
this.QualityChangesEachDay("Conjured", "4", "0", "0", "-1", "twice as fast", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
